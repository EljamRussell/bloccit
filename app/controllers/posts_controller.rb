class PostsController < ApplicationController
  #use a before_action filter to call the require_sign_in method before each of our controller actions,
  #except for the show action.
  before_action :require_sign_in, except: :show
  # before_action :authorize_moderator, only: [:create, :new, :update, :edit]
  # if current-user isn't authorized based on their role, redirect to post show view
  before_action :authorize_user, except: [:show, :new, :create]

  def show
    # find the post that corresponds to the id in the params that were passed to
    # show and assign it to @post.Populate the instance var in a SINGLE post
    @post = Post.find(params[:id])
  end

  def new
    #create an instance var, @post
    #then assign it an empty post returned by Post.new
    @topic = Topic.find(params[:topic_id])    # added to for nesting posts in topic
    @post = Post.new
  end

  def create
    @topic = Topic.find(params[:topic_id])
    @post = @topic.posts.build(post_params)
    # assign @post.user in the same way we assigned @post.topic, to properly scope the new post.
    @post.user = current_user
    #if successful save, display success message with flash[:noteice]
    #and redirect user to route generated by @post
    if @post.save
      # assign a value to flash[:notice] The flash has provides
      # a way to pass temp values between actions. Avail in next action
      # then deleted
      flash[:notice] = "Post was saved."
      redirect_to [@topic, @post]
    else
      # if not successful in save, display error, render the new view again
      flash.now[:alert] = "There was an error saving the post. Please try again."
      render :new
    end
  end

  def edit
    @post = Post.find(params[:id])
  end

  def update
    @post = Post.find(params[:id])
    @post.assign_attributes(post_params)

    if @post.save
      flash[:notice] = "Post was updated."
      redirect_to [@post.topic, @post]
    else
      flash.now[:alert] = "There was an error saving the post. Please try again."
      render :edit
    end
  end

  def destroy
    @post = Post.find(params[:id])

    # call destroy on post, if successful set set a flash message & return to posts index view
    # if destroy fails, set a alert message and return to show view
    if @post.destroy
      flash[:notice] = "\"#{@post.title}\" was deleted successfully."
      redirect_to @post.topic
    else
      flash.now[:alert] = "There was an error deleting the post."
      render :show
    end
  end

  # Any method defined below private, will be private.
   private
   def post_params
     params.require(:post).permit(:title, :body)
   end

def authorize_user
     post = Post.find(params[:id])
 # redirect the user unless they own the post they're attempting to modify, or they're an admin.
     unless current_user == post.user || current_user.admin?
       flash[:alert] = "You must be an admin to do that."
       redirect_to [post.topic, post]
     end
   end
end
